#include"anglesolve1.h"

using namespace cv;
using namespace std;

//相机参数
double M_[3][3] =
{
	657.0144124733205, 0, 314.6081173165169,
	0, 652.951420320278, 271.0189227539616,
	0, 0, 1
};
double D_[1][5] =
{
	0.08399284030325356, -0.2430573823398033, 0.004510899905465263, 0.001928853725613279, 0.1829411276297421
};

double fx = M_[0][0];
double fy = M_[1][1];
double cx = M_[0][2];
double cy = M_[1][2];


void angle_solve(vector<Point2f> amor_4points1, double& yaw, double& pitch)
{

	
	double distance = distance_solve(amor_4points1);
	Point2f target_point = target_solve(distance);
	Point2f amor_point;//装甲板中心点


	amor_point.x = (amor_4points1[0].x + amor_4points1[1].x + amor_4points1[2].x + amor_4points1[3].x) / 4;
	amor_point.y = (amor_4points1[0].y + amor_4points1[1].y + amor_4points1[2].y + amor_4points1[3].y) / 4;

	yaw = atan((target_point.x - cx) / fx) - atan((amor_point.x - cx) / fx);
	pitch = atan((target_point.y - cy) / fy) - atan((amor_point.y - cy) / fy);
	
}

double distance_solve(vector<Point2f> amor_4points2)
{
	//灯条的像素高度
	double pixel_distance = sqrt(pow(amor_4points2[0].x - amor_4points2[1].x, 2) + pow(amor_4points2[0].y - amor_4points2[1].y, 2));
	//灯条的实际高度
	double object_distance = LIGHT_LENGTH;
	//小孔成像原理测距
	double distance = (fy * object_distance) / pixel_distance;
	cout << distance << endl;
	return distance;
}

Point2f target_solve(double distance)
{
	Point2f target_point;
	double camera_height = CAMERA_HEIGHT;
	target_point.x = cx;
	target_point.y = cy - camera_height * fy / distance;
	return target_point;
}
